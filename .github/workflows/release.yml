name: Release (Portable)

on:
  push:
    branches: [ main ]
    tags:
      - app-v*
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build (${{ matrix.platform }})
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-22.04]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20.4.x"
          cache: "yarn"

      - name: Install Linux build deps
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev libwebkit2gtk-4.0-dev \
            libappindicator3-dev librsvg2-dev patchelf

      - uses: dtolnay/rust-toolchain@stable

      - name: Install JS deps
        run: yarn --immutable

      - name: Build workspace
        run: yarn build
        env:
          NODE_OPTIONS: --max-old-space-size=6000

      - name: Build Tauri App (portable, no updater)
        uses: tauri-apps/tauri-action@v0
        with:
          projectPath: packages/app
          tauriScript: yarn tauri
          args: >-
            --verbose
            --config '{ "tauri": { "updater": { "active": false }, "bundle": { "targets": ["app"] } } }'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000

      # Stage binaries with clean names so the release looks nice
      - name: Stage artifacts
        shell: bash
        run: |
          set -eu
          STAGE="dist/${{ matrix.platform }}"
          mkdir -p "$STAGE"
          # copy any built executables (Windows .exe, Linux ELF)
          shopt -s nullglob
          cp -v packages/app/src-tauri/target/**/release/*.exe "$STAGE/" 2>/dev/null || true
          # Linux binaries (no extension)
          for f in packages/app/src-tauri/target/**/release/*; do
            if [ -f "$f" ] && [[ "$f" != *.dSYM ]] && [[ "$f" != *.a ]] && [[ "$f" != *.lib ]] && [[ "$f" != *.rlib ]] && [[ "$f" != *.pdb ]]; then
              cp -v "$f" "$STAGE/" || true
            fi
          done
          # Tar/zip per platform for single-click download
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            (cd dist && powershell -NoProfile -Command "Compress-Archive -Force '${{ matrix.platform }}' 'rivet-${{ matrix.platform }}.zip'")
          else
            (cd dist && tar -czf "rivet-${{ matrix.platform }}.tar.gz" "${{ matrix.platform }}")
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rivet-${{ matrix.platform }}
          path: |
            dist/rivet-${{ matrix.platform }}.zip
            dist/rivet-${{ matrix.platform }}.tar.gz
          if-no-files-found: warn
          retention-days: 30

  publish:
    name: Publish release assets
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: List gathered files
        run: |
          echo "Collected files:"
          find _artifacts -type f -maxdepth 3 -print

      # Create/Update Nightly prerelease on non-tag runs
      - name: Publish Nightly prerelease
        if: ${{ !startsWith(github.ref, 'refs/tags/app-v') }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly
          name: Nightly
          prerelease: true
          draft: false
          fail_on_unmatched_files: false
          generate_release_notes: false
          files: |
            _artifacts/**/rivet-windows-latest.zip
            _artifacts/**/rivet-ubuntu-22.04.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create Draft release on real tags and attach assets
      - name: Publish versioned release (draft)
        if: startsWith(github.ref, 'refs/tags/app-v')
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          name: Rivet IDE ${{ github.ref_name }}
          body: |
            Portable builds (no installer). Download the asset for your platform.
          files: |
            _artifacts/**/rivet-windows-latest.zip
            _artifacts/**/rivet-ubuntu-22.04.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
