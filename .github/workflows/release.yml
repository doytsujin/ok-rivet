name: Release (Portable)

on:
  push:
    branches: [ main ]
    tags:
      - app-v*
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build (${{ matrix.platform }})
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-22.04]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20.4.x"
          cache: "yarn"

      # Linux GUI deps required by Tauri even for portable "app" target
      - name: Install Linux build deps
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev libwebkit2gtk-4.0-dev \
            libappindicator3-dev librsvg2-dev patchelf

      - uses: dtolnay/rust-toolchain@stable

      # If you use Yarn Berry and Corepack, you can enable it:
      # - run: corepack enable

      - name: Install JS deps
        run: yarn --immutable

      - name: Build workspace
        run: yarn build
        env:
          NODE_OPTIONS: --max-old-space-size=6000

      # Build ONLY portable executables and DISABLE updater (no signing keys needed)
      - name: Build Tauri App (portable, no updater)
        id: tauri
        uses: tauri-apps/tauri-action@v0
        with:
          projectPath: packages/app
          tauriScript: yarn tauri
          # IMPORTANT: no extra "build" token here; the action runs `tauri build` already.
          # Compact JSON to avoid quoting issues.
          args: >-
            --verbose
            --config {"tauri":{"updater":{"active":false},"bundle":{"targets":["app"]}}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000

      # Upload exactly what Tauri produced (uses action's artifactPaths output)
      - name: Upload build artifacts (portable)
        uses: actions/upload-artifact@v4
        with:
          name: rivet-${{ matrix.platform }}
          path: ${{ steps.tauri.outputs.artifactPaths }}
          if-no-files-found: error
          retention-days: 30

  publish:
    name: Publish release assets
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: List gathered files
        run: |
          echo "Collected files:"
          find _artifacts -type f -maxdepth 5 -print

      # Nightly prerelease for main/manual runs (overwrites/updates same tag)
      - name: Publish Nightly prerelease (portable)
        if: ${{ !startsWith(github.ref, 'refs/tags/app-v') }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly
          name: Nightly
          prerelease: true
          draft: false
          fail_on_unmatched_files: false
          generate_release_notes: false
          files: _artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Versioned Draft Release for tags app-v*
      - name: Publish versioned release (draft, portable)
        if: startsWith(github.ref, 'refs/tags/app-v')
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          name: Rivet IDE ${{ github.ref_name }}
          body: |
            Portable builds (no installer). Download the asset for your platform.
          files: _artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
